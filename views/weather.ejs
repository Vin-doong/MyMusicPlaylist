<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>현재 날씨는?</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <!-- 헤더 -->
    <%- include('partials/header'); %>

    <div class="container text-center mt-5">
      <h1>현재 위치 날씨에 따른 플레이리스트?</h1>

      <!-- 위치 받아오기 버튼 -->
      <div class="mt-4">
        <button id="getLocation" class="btn btn-outline-info">플레이리스트를 보여줘</button>
      </div>

      <!-- 오류 메시지 표시 -->
      <div id="errorMessage" class="mt-4 text-danger d-none">
        <p>위치 정보를 가져오는 데 실패했습니다. 다시 시도해주세요.</p>
      </div>


      <!-- 결과 표시 -->
    <div id="results" class="mt-5"></div>
    </div>

    <script>
      const button = document.getElementById("getLocation");
      const weatherInfoDiv = document.getElementById("weatherInfo");
      const errorMessageDiv = document.getElementById("errorMessage");


      const API_KEY = "CDmRNLxZQDO5kTS8WfAzDA";

      button.addEventListener("click", () => {
        navigator.geolocation.getCurrentPosition(success, fail);
      });

      const success = (position) => {
        errorMessageDiv.classList.add("d-none");
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;

        console.log("위도:", lat, "경도:", lon);

        getPosition(lat, lon)
          .then((localPosition) => {
            const currentDateTime = getCurrentDateTime();

            getweather(localPosition, currentDateTime).then((Values) => {
              console.log("날씨요청완료");
              const weathercode = getWeathercode(Values);
              console.log("날씨 코드:", weathercode);
              const weatherKeywords = setWeatherKeywords(weathercode);
              getWeatherPlaylist(weatherKeywords);
            });
          })
          .catch((err) => {
            showError("좌표 변환 실패: " + err.message);
          });
      };

      const fail = () => {
        showError("좌표를 받아올 수 없습니다.");
      };

      const showError = (message) => {
        errorMessageDiv.textContent = message;
        errorMessageDiv.classList.remove("d-none");
      };

      const getPosition = async (lat, lon) => {
        const p_url = `https://apihub.kma.go.kr/api/typ01/cgi-bin/url/nph-dfs_xy_lonlat?lat=${lat}&lon=${lon}&help=0&authKey=${API_KEY}`;

        const response = await fetch(p_url);
        if (!response.ok) {
          throw new Error("네트워크 응답이 올바르지 않습니다.");
        }

        const data = await response.text();
        console.log(data);
        const lines = data.split("\n");
        const dataLine = lines[2]

        if (dataLine) {
          const values = dataLine
            .trim()
            .split(",")
            .map((val) => val.trim());
          const x = values[2];
          const y = values[3];
          console.log(x,y);
          return { x, y };
        } else {
          throw new Error("필요한 데이터를 찾을 수 없습니다.");
        }
      };

      const getCurrentDateTime = () => {
        const now = new Date();

        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, "0");
        const day = String(now.getDate()).padStart(2, "0");
        let hours = now.getHours();
        const minutes = "30";

        if (now.getMinutes() < 30) {
          hours -= 1;
        }

        if (hours < 0) {
          hours = "00";
        } else {
          hours = String(hours).padStart(2, "0");
        }
        return {
          date: `${year}${month}${day}`,
          time: `${hours}${minutes}`,
        };
      };

      const getweather = async (localPosition, currentDateTime) => {
        console.log("날씨 요청중...");
        const w_url =
          `https://apihub.kma.go.kr/api/typ02/openApi/VilageFcstInfoService_2.0/getUltraSrtFcst?` +
          `pageNo=1&numOfRows=20&dataType=JSON&base_date=${currentDateTime.date}&base_time=${currentDateTime.time}` +
          `&nx=${localPosition.x}&ny=${localPosition.y}&authKey=${API_KEY}`;

        const response = await fetch(w_url);
        if (!response.ok) {
          throw new Error("날씨 응답이 올바르지 않습니다.");
        }

        const json = await response.json();
        console.log("날씨 데이터:", json);
        if (json.response && json.response.body && json.response.body.items) {
          const weatherItems = json.response.body.items.item;
          const skyValues = weatherItems
            .filter((item) => item.category === "SKY")
            .map((item) => item.fcstValue);
          const rainValues = weatherItems
            .filter((item) => item.category === "PTY")
            .map((item) => item.fcstValue);
          const skyValue = skyValues[0] || "N/A";
          const rainValue = rainValues[0] || "N/A";
          return { skyValue, rainValue };
        } else {
          throw new Error("날씨 데이터를 찾을 수 없습니다.");
        }
      };

      const getWeathercode = (Values) => {
        const skyValue = Values.skyValue;
        const rainValue = Values.rainValue;
        let weathercode;
        // 맑음(0), 흐림(1), 비(2), 눈(3)
        if (skyValue == 1 && rainValue == 0) {
          weathercode = 0;
        } else if ((skyValue == 3 || skyValue == 4) && rainValue == 0) {
          weathercode = 1;
        } else if (rainValue == 1 || rainValue == 2 || rainValue == 5) {
          weathercode = 2;
        } else if (rainValue == 6 || rainValue == 7) {
          weathercode = 3;
        } else {
          weathercode = "N/A";
        }

        return weathercode;
      };

      const setWeatherKeywords = (weathercode) => {
        const weatherKeywords = [];
        if (weathercode == 0) {
          weatherKeywords.push("햇살");
          weatherKeywords.push("맑은 날");
          weatherKeywords.push("청량");
        } else if (weathercode == 1) {
          weatherKeywords.push("잔잔한");
          weatherKeywords.push("흐린 날");
          weatherKeywords.push("감성");
        } else if (weathercode == 2) {
          weatherKeywords.push("비 오는 날");
          weatherKeywords.push("비 내리는 카페");
        } else if (weathercode == 3) {
          weatherKeywords.push("겨울");
          weatherKeywords.push("눈 오는 날");
          weatherKeywords.push("크리스마스");
        }
        return weatherKeywords;
      };
      const getWeatherPlaylist = async (weatherKeywords) => {
        try {
          const response = await fetch("/main/weather", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(weatherKeywords),
          });

          if (!response.ok) {
            throw new Error("서버 응답 실패");
          }

          const data = await response.json();
          console.log("받은 데이터:", data);
          // 데이터로 추가 작업 수행
          const resultsDiv = document.getElementById('results');
          resultsDiv.innerHTML = '';

          data.forEach(track => {
          const trackDiv = document.createElement('div');
          trackDiv.innerHTML = `
            <div class="card mt-3" style="max-width: 540px; margin: 0 auto;">
              <div class="row g-0">
                <div class="col-md-4">
                  <img src="${track.album.images[0]?.url}" class="img-fluid rounded-start" alt="${track.name}">
                </div>
                <div class="col-md-8">
                  <div class="card-body">
                    <h5 class="card-title">${track.name}</h5>
                    <p class="card-text">아티스트: ${track.artists.map(artist => artist.name).join(', ')}</p>
                    <a href="${track.external_urls.spotify}" target="_blank" class="btn btn-primary">Spotify에서 보기</a>
                  </div>
                </div>
              </div>
            </div>
          `;
          resultsDiv.appendChild(trackDiv);
          });
        } catch (error) {
          console.error("서버 요청 오류:", error);
        }
      };
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
